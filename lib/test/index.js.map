{"version":3,"sources":["../../src/test/index.js"],"names":["t","json","equal","Marker","comments","end","then","e","message","html","readFileSync","resolve","__dirname","deepEqual"],"mappings":";;;;AAAA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;AAEA,oBAAK,SAAL;AAAA,+BAAgB,WAAMA,CAAN,EAAW;AACzB,QAAMC,OAAO,MAAM,oBAAQ,MAAR,CAAnB;AACAD,MAAEE,KAAF,CAAQ,QAAR,SAAyBD,IAAzB,yCAAyBA,IAAzB;AACAD,MAAEE,KAAF,CAAQ,UAAR,EAAoBD,KAAKE,MAAL,CAAY,CAAZ,EAAeC,QAAnC;AACAJ,MAAEK,GAAF;AACD,GALD;;AAAA;AAAA;AAAA;AAAA;;AAOA,oBAAK,iBAAL,EAAwB,aAAK;AAC3B,sBAAQ,MAAR,EAAgBC,IAAhB,CAAqB,gBAAQ;AAC3BN,MAAEE,KAAF,CAAQ,QAAR,SAAyBD,IAAzB,yCAAyBA,IAAzB;AACAD,MAAEE,KAAF,CAAQ,UAAR,EAAoBD,KAAKE,MAAL,CAAY,CAAZ,EAAeC,QAAnC;AACAJ,MAAEK,GAAF;AACD,GAJD;AAKD,CAND;;AAQA,oBAAK,iBAAL;AAAA,gCAAwB,WAAML,CAAN,EAAW;AACjC,QAAI;AACF,YAAM,oBAAQ,WAAR,CAAN;AACD,KAFD,CAEE,OAAOO,CAAP,EAAU;AACVP,QAAEE,KAAF,CAAQ,iDAAR,EAA2DK,EAAEC,OAA7D;AACAR,QAAEK,GAAF;AACD;AACF,GAPD;;AAAA;AAAA;AAAA;AAAA;;AASA,oBAAK,WAAL,EAAkB,aAAK;AACrB,MAAMI,OAAO,aAAGC,YAAH,CAAgB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,sBAAxB,CAAhB,CAAb;AACAZ,IAAEa,SAAF,CAAY,sBAAUJ,IAAV,CAAZ;AACAT,IAAEK,GAAF;AACD,CAJD;;AAMA,oBAAK,mBAAL,EAA0B,aAAK;AAC7B,MAAI;AACF,0BAAU,kBAAV;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU;AACVP,MAAEE,KAAF,CAAQ,uBAAR,EAAiCK,EAAEC,OAAnC;AACAR,MAAEK,GAAF;AACD;AACF,CAPD","file":"index.js","sourcesContent":["import 'source-map-support/register';\n\nimport fs from 'fs';\nimport path from 'path';\nimport test from 'tape';\n\nimport { getJson, parseJson } from '../index.js';\nimport json from './fixtures/F56K.json';\n\ntest('getJson', async t => {\n  const json = await getJson('F56K');\n  t.equal('object', typeof json);\n  t.equal('commentz', json.Marker[0].comments);\n  t.end();\n});\n\ntest('getJson promise', t => {\n  getJson('F56K').then(json => {\n    t.equal('object', typeof json);\n    t.equal('commentz', json.Marker[0].comments);\n    t.end();\n  });\n});\n\ntest('getJson failure', async t => {\n  try {\n    await getJson('NOPE_BREH');\n  } catch (e) {\n    t.equal('Unable to get JSON for CalTopo map \"NOPE_BREH\".', e.message);\n    t.end();\n  }\n});\n\ntest('parseJson', t => {\n  const html = fs.readFileSync(path.resolve(__dirname, './fixtures/F56K.html'));\n  t.deepEqual(parseJson(html), json);\n  t.end();\n});\n\ntest('parseJson failure', t => {\n  try {\n    parseJson('asdfasjdoifhsadf');\n  } catch (e) {\n    t.equal('Unable to parse JSON.', e.message);\n    t.end();\n  }\n});\n"]}