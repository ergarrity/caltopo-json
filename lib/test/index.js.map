{"version":3,"sources":["../../src/test/index.js"],"names":["t","json","equal","Marker","comments","end","metaData","mapData","e","message","html","readFileSync","resolve","__dirname","deepEqual"],"mappings":";;;;AAAA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;AACA;;;;;;;;AAEA,oBAAK,SAAL;AAAA,+BAAgB,WAAMA,CAAN,EAAW;AACzB,QAAMC,OAAO,MAAM,oBAAQ,MAAR,CAAnB;AACAD,MAAEE,KAAF,CAAQ,QAAR,SAAyBD,IAAzB,yCAAyBA,IAAzB;AACAD,MAAEE,KAAF,CAAQ,UAAR,EAAoBD,KAAKE,MAAL,CAAY,CAAZ,EAAeC,QAAnC;AACAJ,MAAEK,GAAF;AACD,GALD;;AAAA;AAAA;AAAA;AAAA;;AAOA,oBAAK,iBAAL;AAAA,gCAAwB,WAAML,CAAN,EAAW;AACjC,QAAMC,OAAO,MAAM,oBAAQ,MAAR,CAAnB;AACAD,MAAEE,KAAF,CAAQ,QAAR,UAAyBD,KAAKK,QAA9B;AACAN,MAAEE,KAAF,CAAQ,QAAR,UAAyBD,KAAKM,OAA9B;AACAP,MAAEE,KAAF,CAAQ,UAAR,EAAoBD,KAAKM,OAAL,CAAaJ,MAAb,CAAoB,CAApB,EAAuBC,QAA3C;AACAJ,MAAEK,GAAF;AACD,GAND;;AAAA;AAAA;AAAA;AAAA;;AAQA,oBAAK,iBAAL;AAAA,gCAAwB,WAAML,CAAN,EAAW;AACjC,QAAI;AACF,YAAM,oBAAQ,WAAR,CAAN;AACD,KAFD,CAEE,OAAOQ,CAAP,EAAU;AACVR,QAAEE,KAAF,CAAQ,iDAAR,EAA2DM,EAAEC,OAA7D;AACAT,QAAEK,GAAF;AACD;AACF,GAPD;;AAAA;AAAA;AAAA;AAAA;;AASA,oBAAK,eAAL,EAAsB,aAAK;AACzB,MAAMK,OAAO,aAAGC,YAAH,CAAgB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,sBAAxB,CAAhB,CAAb;AACAb,IAAEc,SAAF,CAAY,0BAAcJ,IAAd,CAAZ;AACAV,IAAEK,GAAF;AACD,CAJD;;AAMA,oBAAK,cAAL,EAAqB,aAAK;AACxB,MAAMK,OAAO,aAAGC,YAAH,CAAgB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,sBAAxB,CAAhB,CAAb;AACAb,IAAEc,SAAF,CAAY,yBAAaJ,IAAb,CAAZ;AACAV,IAAEK,GAAF;AACD,CAJD;;AAMA,oBAAK,uBAAL,EAA8B,aAAK;AACjC,MAAI;AACF,8BAAc,kBAAd;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACVR,MAAEE,KAAF,CAAQ,iCAAR,EAA2CM,EAAEC,OAA7C;AACAT,MAAEK,GAAF;AACD;AACF,CAPD;;AASA,oBAAK,sBAAL,EAA6B,aAAK;AAChC,MAAI;AACF,6BAAa,kBAAb;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACVR,MAAEE,KAAF,CAAQ,gCAAR,EAA0CM,EAAEC,OAA5C;AACAT,MAAEK,GAAF;AACD;AACF,CAPD","file":"index.js","sourcesContent":["import 'source-map-support/register';\n\nimport fs from 'fs';\nimport path from 'path';\nimport test from 'tape';\n\nimport { getJson, parseMapData, parseMetaData } from '../index.js';\n\nimport mapData from './fixtures/F56K-map-data.json';\nimport metaData from './fixtures/F56K-meta-data.json';\n\ntest('getJson', async t => {\n  const json = await getJson('F56K');\n  t.equal('object', typeof json);\n  t.equal('commentz', json.Marker[0].comments);\n  t.end();\n});\n\ntest('getJson promise', async t => {\n  const json = await getJson('F56K');\n  t.equal('object', typeof json.metaData);\n  t.equal('object', typeof json.mapData);\n  t.equal('commentz', json.mapData.Marker[0].comments);\n  t.end();\n});\n\ntest('getJson failure', async t => {\n  try {\n    await getJson('NOPE_BREH');\n  } catch (e) {\n    t.equal('Unable to get JSON for CalTopo map \"NOPE_BREH\".', e.message);\n    t.end();\n  }\n});\n\ntest('parseMetaData', t => {\n  const html = fs.readFileSync(path.resolve(__dirname, './fixtures/F56K.html'));\n  t.deepEqual(parseMetaData(html), metaData);\n  t.end();\n});\n\ntest('parseMapData', t => {\n  const html = fs.readFileSync(path.resolve(__dirname, './fixtures/F56K.html'));\n  t.deepEqual(parseMapData(html), mapData);\n  t.end();\n});\n\ntest('parseMetaData failure', t => {\n  try {\n    parseMetaData('asdfasjdoifhsadf');\n  } catch (e) {\n    t.equal('Unable to parse meta data JSON.', e.message);\n    t.end();\n  }\n});\n\ntest('parseMapData failure', t => {\n  try {\n    parseMapData('asdfasjdoifhsadf');\n  } catch (e) {\n    t.equal('Unable to parse map data JSON.', e.message);\n    t.end();\n  }\n});\n"]}